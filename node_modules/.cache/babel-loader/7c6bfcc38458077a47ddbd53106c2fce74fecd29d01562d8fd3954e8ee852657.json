{"ast":null,"code":"var _jsxFileName = \"/Users/ruby/Desktop/split/src/NameRows.jsx\";\nimport { StyledInput } from \"./Styles\";\nimport useStateRef from \"react-usestateref\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NameRows = ({\n  numOfPeople,\n  names,\n  setNames\n}) => {\n  var _s = $RefreshSig$();\n  const NameRow = ({\n    i\n  }) => {\n    _s();\n    const personKey = `person-${i}`;\n    const [currName, setCurrName, currNameRef] = useStateRef(\"\");\n    return /*#__PURE__*/_jsxDEV(StyledInput, {\n      id: `${personKey}-name`,\n      placeholder: `Person ${i} Name`,\n      variant: \"outlined\",\n      value: currNameRef,\n      onChange: e => {\n        setCurrName(e.target.value);\n        setNames({\n          ...names,\n          [personKey]: e.target.value || `Person ${i}`\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this);\n  };\n  _s(NameRow, \"Eb9046erBnDqwM5OosHtYdCcrM8=\", false, function () {\n    return [useStateRef];\n  });\n  const nameRows = [];\n  for (let i = 1; i <= numOfPeople; i++) {\n    nameRows.push(/*#__PURE__*/_jsxDEV(NameRow, {\n      i: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: nameRows\n  }, void 0, false);\n};\n_c = NameRows;\nexport default NameRows;\nvar _c;\n$RefreshReg$(_c, \"NameRows\");","map":{"version":3,"names":["StyledInput","useStateRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NameRows","numOfPeople","names","setNames","_s","$RefreshSig$","NameRow","i","personKey","currName","setCurrName","currNameRef","id","placeholder","variant","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","nameRows","push","children","_c","$RefreshReg$"],"sources":["/Users/ruby/Desktop/split/src/NameRows.jsx"],"sourcesContent":["import { StyledInput } from \"./Styles\";\nimport useStateRef from \"react-usestateref\";\n\nconst NameRows = ({ numOfPeople, names, setNames }) => {\n  const NameRow = ({ i }) => {\n    const personKey = `person-${i}`;\n    const [currName, setCurrName, currNameRef] = useStateRef(\"\");\n    return (\n      <StyledInput\n        id={`${personKey}-name`}\n        placeholder={`Person ${i} Name`}\n        variant=\"outlined\"\n        value={currNameRef}\n        onChange={(e) => {\n          setCurrName(e.target.value);\n          setNames({\n            ...names,\n            [personKey]: e.target.value || `Person ${i}`,\n          });\n        }}\n      />\n    );\n  };\n\n  const nameRows = [];\n  for (let i = 1; i <= numOfPeople; i++) {\n    nameRows.push(<NameRow i={i} />);\n  }\n\n  return <>{nameRows}</>;\n};\nexport default NameRows;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,UAAU;AACtC,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACrD,MAAMC,OAAO,GAAGA,CAAC;IAAEC;EAAE,CAAC,KAAK;IAAAH,EAAA;IACzB,MAAMI,SAAS,GAAG,UAAUD,CAAC,EAAE;IAC/B,MAAM,CAACE,QAAQ,EAAEC,WAAW,EAAEC,WAAW,CAAC,GAAGhB,WAAW,CAAC,EAAE,CAAC;IAC5D,oBACEE,OAAA,CAACH,WAAW;MACVkB,EAAE,EAAE,GAAGJ,SAAS,OAAQ;MACxBK,WAAW,EAAE,UAAUN,CAAC,OAAQ;MAChCO,OAAO,EAAC,UAAU;MAClBC,KAAK,EAAEJ,WAAY;MACnBK,QAAQ,EAAGC,CAAC,IAAK;QACfP,WAAW,CAACO,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;QAC3BZ,QAAQ,CAAC;UACP,GAAGD,KAAK;UACR,CAACM,SAAS,GAAGS,CAAC,CAACC,MAAM,CAACH,KAAK,IAAI,UAAUR,CAAC;QAC5C,CAAC,CAAC;MACJ;IAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEN,CAAC;EAAClB,EAAA,CAlBIE,OAAO;IAAA,QAEkCX,WAAW;EAAA;EAkB1D,MAAM4B,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,WAAW,EAAEM,CAAC,EAAE,EAAE;IACrCgB,QAAQ,CAACC,IAAI,cAAC3B,OAAA,CAACS,OAAO;MAACC,CAAC,EAAEA;IAAE;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EAClC;EAEA,oBAAOzB,OAAA,CAAAE,SAAA;IAAA0B,QAAA,EAAGF;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACG,EAAA,GA3BI1B,QAAQ;AA4Bd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}