{"ast":null,"code":"var _jsxFileName = \"/Users/ruby/Desktop/split-react/src/NameRows.jsx\";\nimport { StyledInput } from './Styles';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NameRows = ({\n  numOfPeople,\n  names,\n  setNames\n}) => {\n  const NameRow = ({\n    i\n  }) => {\n    /*#__PURE__*/_jsxDEV(StyledInput, {\n      id: `person-${i}-name`,\n      placeholder: `Person ${i} Name`,\n      variant: \"outlined\",\n      onChange: e => setNames({\n        ...names,\n        [personKey]: e.target.value || `Person ${i}`\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }, this);\n  };\n  const nameRows = [];\n  for (let i = 0; i < numOfPeople; i++) {\n    nameRows.push(/*#__PURE__*/_jsxDEV(NameRow, {\n      i: i + 1,\n      names: names,\n      setNames: setNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: nameRows\n  }, void 0, false);\n};\n_c = NameRows;\nexport default NameRows;\nvar _c;\n$RefreshReg$(_c, \"NameRows\");","map":{"version":3,"names":["StyledInput","jsxDEV","_jsxDEV","Fragment","_Fragment","NameRows","numOfPeople","names","setNames","NameRow","i","id","placeholder","variant","onChange","e","personKey","target","value","fileName","_jsxFileName","lineNumber","columnNumber","nameRows","push","children","_c","$RefreshReg$"],"sources":["/Users/ruby/Desktop/split-react/src/NameRows.jsx"],"sourcesContent":["import { StyledInput } from './Styles';\n\nconst NameRows = ({ numOfPeople, names, setNames }) => {\n  const NameRow = ({ i }) => {\n    <StyledInput\n      id={`person-${i}-name`}\n      placeholder={`Person ${i} Name`}\n      variant=\"outlined\"\n      onChange={(e) =>\n        setNames({\n          ...names,\n          [personKey]: e.target.value || `Person ${i}`,\n        })\n      }\n    />;\n  };\n  const nameRows = [];\n  for (let i = 0; i < numOfPeople; i++) {\n    nameRows.push(<NameRow i={i + 1} names={names} setNames={setNames} />);\n  }\n  return <>{nameRows}</>;\n};\nexport default NameRows;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACrD,MAAMC,OAAO,GAAGA,CAAC;IAAEC;EAAE,CAAC,KAAK;IACzB,aAAAR,OAAA,CAACF,WAAW;MACVW,EAAE,EAAE,UAAUD,CAAC,OAAQ;MACvBE,WAAW,EAAE,UAAUF,CAAC,OAAQ;MAChCG,OAAO,EAAC,UAAU;MAClBC,QAAQ,EAAGC,CAAC,IACVP,QAAQ,CAAC;QACP,GAAGD,KAAK;QACR,CAACS,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,IAAI,UAAUR,CAAC;MAC5C,CAAC;IACF;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EACJ,CAAC;EACD,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,EAAEI,CAAC,EAAE,EAAE;IACpCa,QAAQ,CAACC,IAAI,cAACtB,OAAA,CAACO,OAAO;MAACC,CAAC,EAAEA,CAAC,GAAG,CAAE;MAACH,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EACxE;EACA,oBAAOpB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,EAAGF;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACG,EAAA,GAnBIrB,QAAQ;AAoBd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}