{"ast":null,"code":"var _jsxFileName = \"/Users/ruby/Desktop/split/src/ResultsScreen.jsx\";\nimport BackLink from \"./BackLink\";\nimport { EXPENSES_SCREEN } from \"./constants\";\nimport Table from \"@mui/joy/Table\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResultsScreen = ({\n  results,\n  setCurrentScreen\n}) => {\n  const formattedResults = [];\n  for (let result of results) {\n    formattedResults.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        style: {\n          width: \"40%\",\n          textAlign: \"left\"\n        },\n        children: result.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        style: {\n          textAlign: \"left\"\n        },\n        children: result.cost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BackLink, {\n      newScreen: EXPENSES_SCREEN,\n      setCurrentScreen: setCurrentScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"40%\"\n            },\n            children: \"Person\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"20%\"\n            },\n            children: \"Cost\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), formattedResults]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = ResultsScreen;\nexport default ResultsScreen;\nvar _c;\n$RefreshReg$(_c, \"ResultsScreen\");","map":{"version":3,"names":["BackLink","EXPENSES_SCREEN","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","ResultsScreen","results","setCurrentScreen","formattedResults","result","push","children","style","width","textAlign","name","fileName","_jsxFileName","lineNumber","columnNumber","cost","newScreen","_c","$RefreshReg$"],"sources":["/Users/ruby/Desktop/split/src/ResultsScreen.jsx"],"sourcesContent":["import BackLink from \"./BackLink\";\nimport { EXPENSES_SCREEN } from \"./constants\";\nimport Table from \"@mui/joy/Table\";\nconst ResultsScreen = ({ results, setCurrentScreen }) => {\n  const formattedResults = [];\n\n  for (let result of results) {\n    formattedResults.push(\n      <tr>\n        <td style={{ width: \"40%\", textAlign: \"left\" }}>{result.name}</td>\n        <td style={{ textAlign: \"left\" }}>{result.cost}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      <BackLink\n        newScreen={EXPENSES_SCREEN}\n        setCurrentScreen={setCurrentScreen}\n      />\n      <Table>\n        <thead>\n          <tr>\n            <th style={{ width: \"40%\" }}>Person</th>\n            <th style={{ width: \"20%\" }}>Cost</th>\n          </tr>\n        </thead>\n        {formattedResults}\n      </Table>\n    </>\n  );\n};\nexport default ResultsScreen;\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,eAAe,QAAQ,aAAa;AAC7C,OAAOC,KAAK,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACnC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAiB,CAAC,KAAK;EACvD,MAAMC,gBAAgB,GAAG,EAAE;EAE3B,KAAK,IAAIC,MAAM,IAAIH,OAAO,EAAE;IAC1BE,gBAAgB,CAACE,IAAI,cACnBR,OAAA;MAAAS,QAAA,gBACET,OAAA;QAAIU,KAAK,EAAE;UAAEC,KAAK,EAAE,KAAK;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAH,QAAA,EAAEF,MAAM,CAACM;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAClEjB,OAAA;QAAIU,KAAK,EAAE;UAAEE,SAAS,EAAE;QAAO,CAAE;QAAAH,QAAA,EAAEF,MAAM,CAACW;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CACN,CAAC;EACH;EAEA,oBACEjB,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACET,OAAA,CAACJ,QAAQ;MACPuB,SAAS,EAAEtB,eAAgB;MAC3BQ,gBAAgB,EAAEA;IAAiB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACFjB,OAAA,CAACF,KAAK;MAAAW,QAAA,gBACJT,OAAA;QAAAS,QAAA,eACET,OAAA;UAAAS,QAAA,gBACET,OAAA;YAAIU,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAE;YAAAF,QAAA,EAAC;UAAM;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxCjB,OAAA;YAAIU,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAE;YAAAF,QAAA,EAAC;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EACPX,gBAAgB;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA,eACR,CAAC;AAEP,CAAC;AAACG,EAAA,GA7BIjB,aAAa;AA8BnB,eAAeA,aAAa;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}