{"ast":null,"code":"var _jsxFileName = \"/Users/ruby/Desktop/split/src/NameRows.jsx\";\nimport { StyledInput } from \"./Styles\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NameRows = ({\n  numOfPeople,\n  names,\n  setNames\n}) => {\n  const NameRow = ({\n    i,\n    names,\n    setNames\n  }) => {\n    const personKey = `person-${i}`;\n    return /*#__PURE__*/_jsxDEV(StyledInput, {\n      id: `person-${i}-name`,\n      placeholder: `Person ${i} Name`,\n      variant: \"outlined\",\n      onChange: e => {}\n      // setNames({\n      //   ...names,\n      //   [personKey]: e.target.value || `Person ${i}`,\n      // })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this);\n  };\n  const nameRows = [];\n  for (let i = 1; i <= numOfPeople; i++) {\n    nameRows.push(/*#__PURE__*/_jsxDEV(NameRow, {\n      i: i,\n      names: names,\n      setNames: setNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: nameRows\n  }, void 0, false);\n};\n_c = NameRows;\nexport default NameRows;\nvar _c;\n$RefreshReg$(_c, \"NameRows\");","map":{"version":3,"names":["StyledInput","jsxDEV","_jsxDEV","Fragment","_Fragment","NameRows","numOfPeople","names","setNames","NameRow","i","personKey","id","placeholder","variant","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","nameRows","push","children","_c","$RefreshReg$"],"sources":["/Users/ruby/Desktop/split/src/NameRows.jsx"],"sourcesContent":["import { StyledInput } from \"./Styles\";\n\nconst NameRows = ({ numOfPeople, names, setNames }) => {\n  const NameRow = ({ i, names, setNames }) => {\n    const personKey = `person-${i}`;\n    return (\n      <StyledInput\n        id={`person-${i}-name`}\n        placeholder={`Person ${i} Name`}\n        variant=\"outlined\"\n        onChange={\n          (e) => {}\n          // setNames({\n          //   ...names,\n          //   [personKey]: e.target.value || `Person ${i}`,\n          // })\n        }\n      />\n    );\n  };\n\n  const nameRows = [];\n  for (let i = 1; i <= numOfPeople; i++) {\n    nameRows.push(<NameRow i={i} names={names} setNames={setNames} />);\n  }\n\n  return <>{nameRows}</>;\n};\nexport default NameRows;\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACrD,MAAMC,OAAO,GAAGA,CAAC;IAAEC,CAAC;IAAEH,KAAK;IAAEC;EAAS,CAAC,KAAK;IAC1C,MAAMG,SAAS,GAAG,UAAUD,CAAC,EAAE;IAC/B,oBACER,OAAA,CAACF,WAAW;MACVY,EAAE,EAAE,UAAUF,CAAC,OAAQ;MACvBG,WAAW,EAAE,UAAUH,CAAC,OAAQ;MAChCI,OAAO,EAAC,UAAU;MAClBC,QAAQ,EACLC,CAAC,IAAK,CAAC;MACR;MACA;MACA;MACA;IACD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEN,CAAC;EAED,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,WAAW,EAAEI,CAAC,EAAE,EAAE;IACrCW,QAAQ,CAACC,IAAI,cAACpB,OAAA,CAACO,OAAO;MAACC,CAAC,EAAEA,CAAE;MAACH,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EACpE;EAEA,oBAAOlB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EAAGF;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACG,EAAA,GAzBInB,QAAQ;AA0Bd,eAAeA,QAAQ;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}